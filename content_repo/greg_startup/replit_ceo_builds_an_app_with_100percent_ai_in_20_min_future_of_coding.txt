All right. I feel very lucky to be talking to Amjad, CEO of Replit, product I use all the time. I know a lot of people on the Startup Ideas podcast use Replit.

And I asked him to come and just help us, us hundreds of thousands of people that are going to listen to this, build their ideas with Replit. And he said yes. Well, thank you for having me.

I mean, this is really my people, people who are building and love using Replit. I'm excited to be here. So first of all, before we get into a live cooking session, why should people use Replit to take their ideas and make them reality?

Yeah. So the reason I'm building this company is because I've been an entrepreneur ever since I can remember. I built my first business when I was 12.

And I remember how difficult it was to do everything from setting up a database to collaborating on code to bringing in packages to maintaining everything to pushing to production or finding a way to get it out to the world. And that sort of put me on a path that's over a decade now, kind of trying to make this process easier. And so the fundamental philosophy behind that is that, well, there's people with so many amazing ideas in the world.

There's people with a lot of talents. But how difficult coding is, is kind of putting up this wall in front of a lot of creative people that could be bringing new products into the world that could enrich the internet and our environment. And just I think that the more people making things, I think just the world is better.

And also there's like a social angle where, you know, the internet for the first time is this magical place where you only don't need a lot of money to be able to create something. And then you can really change your circumstances fundamentally. So that's why I'm passionate about it.

Yeah. I also think the beauty is, you know, you don't need to be in Silicon Valley. I know you're in Silicon Valley, but you don't need to be in Silicon Valley to go and create something that millions of people use.

You can be anywhere and use a tool like Replit to go and build. Yeah. Yeah.

And so what we what we do is, you know, I try to keep that sort of term simple, not use a lot of buzzwords. But you go into Replit, the first thing that like the core product is there's an editor in your browser. So you don't have to download some kind of IDE or editor or any or any of that.

We have a collection of hundreds of templates. So whatever program language or framework you like, we probably support that. If we don't support it, you can also figure out how to make it work with Replit.

We make those tools and tutorials available. And then you start a project and you start writing code or you generate code using our AI or you generate code using an external AI. People like using Claude these days.

And by, you know, pasting it or putting it somehow into Replit, pushing it into Replit and you hit run, Replit will actually detect the packages that it needs to install. We'll install them for you. So you don't need to mess up with mess with a shell or do all that stuff.

If you want to use version control, it's also just point and click. You don't have to go into the shell and do that. And when you're ready to kind of deploy your project, it's one click as well.

And also if you want a database, if you want a object storage, if you want any sort of really cloud services that otherwise you would need to go figure out AWS or some other service for it. Those are also like a couple of clicks. And so now you have an idea, you come to Replit, you generate the code or write the code.

You bring in the dependencies and the databases and infrastructure and one click done and you have your website up. Now, on top of all of that, we know that coding is still intimidating for a lot of people. So we created in beta, we have this product called Agent that does all of that for you.

So you don't even have to click. And so you just put your idea there. I will emphasize that it is an early access.

So it is still quite buggy. We're fixing it really fast. But we've seen people from all walks of life, you know, real estate agents from Ohio.

You have, you know, yoga coaches, therapists. Really, I've never seen anything like that. I've been working at Replit for many years.

And all these people are able to build right now because you can just interact with the environment using natural language. And that's the goal. And Replit kind of is built on open source standards.

So we use Git. We don't lock you in. You want to download your code and go.

That's fine. You can use external editors. Some people use VS Code and Cursor with Replit as well.

I know you covered that on your show. You can deploy elsewhere. And so really the ethos of open source and open standard.

And I can't think of a better person to teach us the ins and outs of Replit than you. Would you be open to kind of sharing your screen and just, you know, demoing how you think about it and maybe giving people some tips and tricks along the way? Absolutely.

Let's do it. I love it. Shh.

Don't tell anyone. But I've got 30 plus startup ideas that could make you millions. And I'm giving them away for free.

These aren't just random guesses. They're validated concepts from entrepreneurs who've built $100 million plus businesses. I've compiled them into one simple database.

Compiled from hundreds of conversations I've had on my podcast. But the main thing is most of these ideas don't need a single investor. Some cost nothing to start.

I'm pretty much handing you a cheat sheet. The Idea Bank is your startup shortcut. Just click below to get access.

Your next cash flowing business is waiting for you. And while you're pulling it up, I think Replit is one of those tools. And I don't say this lightly to everyone listening.

This is like a tool of a generation. So many of us have ideas, but we struggle with putting it out there. And Replit, especially where Replit's going with agents, makes it so much easier.

All right. This looks... I see your screen now.

All right. Awesome. All right.

So let's improvise something. Do you have an idea to give me so that it doesn't look like I prepared something? Do I have an idea to give you?

Is it crazy to do something with location? Yeah, we can do location. So let's say maybe a map of some of the scenic drives in the Bay Area.

Yeah. That sounds perfect. That sounds hard.

That sounds hard. So let's see. And do you mind just zooming in a little bit as well?

Yeah. So this is Replit's homepage. So we're going to use the agent, at least as the access point.

So we'll go into the coding as well. But Replit agent is great at setting up the project. So we're going to use that to kind of set up the project, get the initial prototype going.

And you can, of course, create the project manually. And we'll cover that in a bit. But let's go through the agent now.

So I just type, like just in a sentence, like a map of scenic drives in the Bay Area. I have no idea where it's going to pull the data from. I have no idea what libraries it's going to use.

And again, just a simple idea. And we can hit start building now. So this tells me it's still in early access.

Now, any minute now, we should go into a chat interface. And the agent should start working on proposing a plan for me. And while that's loading, how in-depth of a prompt should it be?

How short? How in-depth? What do you see as best practice?

You know, I like short prompts because the way I program is I have like an inkling of an idea. And I like to do it in iterative fashion. And so it also depends how you think.

I think it's easy to overcomplicate things at the top. And so I like to see something on the screen before getting in and like, you know, adding more complexity. So, you know, here it's kind of pick the stack.

It's going to use Streamlit. That's fine by me. It's going to build the initial prototype.

And, you know, it proposes all sorts of interesting features that we can add. But I'm just going to go with the prototype here. So, and then we can add some more features as we go.

And so the first thing you'll notice is it'll just start cranking out code. And it's really fun to watch it crank out code. And you can even sort of start reading and learning maybe what it's doing.

Here it's like creating the data with the drives. I think it's just making it up for now. We can ask it to pull it from somewhere in a bit.

It's now installing the packages. So this is, you know, all the Python environment packages you would need to be able to make this application. Realize it needs to install a little bit more packages here.

And now it's going to configure the app to run. And this is, again, doing kind of standard Linux configuration. And then any moment we should be able to see something on the screen.

I also, you know, for the beginner developers who are listening to this, and even intermediate, if you don't know what a package is or something like that, this is a great time to just start Googling and learning as you're building. I think that's a fun way to learn how to code. That's exactly right.

So here it, this is actually kind of my favorite drive across the Pacific Highway Coast. So it kind of created a prototype. It has some, Skyline Boulevard is where, you're not in the Bay Area, are you?

I lived in the Bay Area for eight, nine years. So I know it well. Have you been to Skyline?

I actually haven't. I guess I don't know it that well. So this is the car scene in Asaf.

So this is where all the Lamborghinis and really fast cars and motorcycles go, because it's like this big scenic stretch of road. And there's like a burger and bar and gas station in the middle where everyone, everyone's there kind of showing off their cars. So it got the right things there.

And it has some information here, but also has some bugs. Like there's like an image here that is not rendering. We can select a drive and it can show us the drive here.

You can see on the right, I'm already testing the app. On the right here, it's asking us, is the scenic drives in the Bay Area app working? Can you see the interactive map and list of scenic drives?

So one of the cool things about how we built the agent is that it is kind of like a co-worker. You can imagine it's like a junior software developer. And so it's kind of constantly asking you for feedback.

And so here, yes, it's working. I can see that there are images that are not rendering on the screen. Also, the drive description on the map is hard to read.

Maybe add a solid background. So based on a bit of using the app, you can sort of give it feedback. It'll now try to debug and figure out what went wrong in that bug, whatever it is, and then try to fix what I asked it to fix.

In the meantime, let me show just the IDE features. So as it's coding, I can just navigate here to the code. So here you have a full-featured code editor.

I can go in here and code directly or use the built-in AI to do changes that are more local, because the agent generally does bigger changes in the app. I can invite someone to code together. And this is if you've used Google Docs.

It's a really great experience to kind of code with other people. So here it updated the app, and it's asking me for more feedback. You can also see here that it made a checkpoint.

So if we don't like what it did, I can kind of roll back to an earlier checkpoint. So it gives you control over what's sort of missing. So what I think is happening is that it's unable to render this car icon.

And so as you're trying to navigate the bugs with it, you can learn what's going on, and sometimes you can sort of give it sort of hints about what's going on here. So maybe we're going to open the dev tools, see what's going on. Well, I can just tell it no.

No, neither of those things happened. So again, it's a junior developer, it often makes mistakes, and we can sort of iterate back and forth with it. I just have a product question I have to ask you while this is happening.

Why did you decide to call it Replit Agent versus giving it a name, like the Greg Agent or Greg Engineer? Greg would have been a wonderful name. But our sort of philosophy at Replit with naming is we don't want to set the expectations too high.

So if we made it as if it's like an actual person, then people will have a much higher expectations of the product. And I think naming really, really matters. Tesla, for example, is now rolling out ASS, their actually smart summon product.

So their initial product was smart summon, now it's called dumb summon. And ASS is the actually smart summon. And so you get into this sort of treadmill in naming when you set the bar too high.

Agent is kind of generic, right? It is an agent. We didn't name it autopilot or automatic coder or what have you or a person's name.

Because we just want to set the expectation that this is something that is going to be trying its best to do what you ask it for, but not necessarily always succeeding. Yeah. And I think that's a good lesson in all products.

Yeah, exactly. So here we're kind of hitting a problem with the images. I'm just going to tell it, just remove the image.

Just remove the car image, please. It's not working. And I guess the lesson there is maybe talk a little bit about how to think about debugging and reducing your variables and stuff like that.

Yeah. So in this case, it's adding a feature that I didn't ask for in the first place. It wanted to render sort of a car image in the map.

And it's showing up as a broken image. And I was like, I really don't need that feature. And it's trying really hard to render that car image.

And I'm like, okay, just remove that. And so it added these markers, which I think are a lot better. And now we have these pop-ups that tell me information about the rise, which is way, way better.

So this is great. So I'm going to tell it, yes, pop-ups are visible. And it's working correctly.

So, you know, oftentimes changing the requirements slightly when the agent is hitting a problem might kind of net out a better experience. And now let me show you how to deploy this app. And then we'll make some more changes.

I'll show you some other features. So deploying an app, meaning you take an application that is in development, right? If you notice here, it says Repli.dev.

This is a development URL. You should not share that with the world. You can, but this is not ideal.

It is not going to be the most optimized version of it. And it will also go down after a time. But if you want to keep it up forever, if you want, we can just set up this deployment.

So here it tells us, like, you know, what kind of machine configuration do you want? It tells you how much it's going to cost you. So I'm going to select something really small because I don't think it's going to, it's that expensive or that, you know, performance of an app.

So here the run command is automatically configured by the agent. I don't have to do anything else, really. I'm just going to hit Deploy.

And so now this is going to build a package. It's going to ship it over to Google Cloud. We use Google Cloud for backend deployments.

And we'll actually, it's a very secure deployment as well. We'll create a project just for this, just for this, this deployment. And that deployment will stay up.

You can, like, look at logs. Once we've started getting users, you can look at analytics here. You can look at the browsers, devices, countries where people are coming from.

So it gives you the entire kind of feature set needed to manage a production deployment. And I don't think people realize how amazing this is. As, you know, I'm a pretty bad engineer.

And the fact that you've abstracted all of this away and just basically you press a button and it's deployed securely. Like this is, how big of a deal is this? It's a pretty big deal.

Like, like, again, when, I mean, if you, if you want to try to, like, figure out, you know, for example, like how to deploy to, how to deploy to AWS. Let's see here what Google tells us. First of all, you need to look for something.

Is AWS Amplify? It gives you a choice. Code deploy or amplify.

Okay. What does that mean? So you get started under deliver.

You choose deploy and continue. Name your app environment. Select the app and the code of the console.

It's save deploy. And so you need to figure out how to use the AWS CLI. You need to figure out how to put your application code in there.

So you need to use something called SCP and FTP. What the hell is this? Like, what is SCP and how do you use it?

So now you're down this thing called secure copy protocol. And you need to be able to use it, you know, open a shell and type a command and know how to use it. And you're already down a rabbit hole that you really don't want to be down.

And so for us here, we're just really trying to make it a couple of clicks. You get all the security and all the features you need out of really any kind of the best cloud providers available. And I will say also our prices are very, very affordable.

Are in line with, are very competitive in line with really top cloud providers. Yeah, I just know that like in the past when I've built stuff and deployed it, it's like so scary. So the fact that, you know, you just press a button and it's done, just like it, it makes me, it makes me want to come back and build more stuff because I don't have that scary part of deploying.

So here's the deployed app. So Bayer, Scenic Routes, one, Amosad, Replit, all up. So anyone can, could go to that and be able to use it now.

It's still booting up here, but it is a production app. It is on the internet and, and, and you're done. And now we can go back to the app and kind of do some more, some more things.

And, and this in crucially, we can go to the app and do more things and this will not break. This will continue being up. And that's the important things about deployment is that it is now separating your development environment from the deployment environment.

Quick ad break. Let me tell you about a business I invested in. It's called boringmarketing.com.

So a few years ago, I met this group of people that were some of the best SEO experts in the world. They were behind getting some of the biggest companies found on Google. And the secret sauce is they've got a set of technology and AI that could help you outrank your competition.

So for my own businesses, I wanted that. I didn't want to have to rely on Mark Zuckerberg. I didn't want to depend on ads to drive customers to my businesses.

I wanted to rank high in Google. That's why I like SEO. And that's why I use boringmarketing.com.

And that's why I invested in it. They're so confident in their approach that they offer a 30 day sprint with a hundred percent money back guarantee. Who does that nowadays?

So check it out. Highly recommend boringmarketing.com. Now, I want to just show a few things that we also abstract our way that are very, very nice.

So we have Postgres databases. So Postgres is kind of the state-of-the-art database. You might have heard of Supabase and other databases like that.

And we can one-click integrate into the project, or you can ask the agent to do that. So I'm going to just ask the agent. I want to use Postgres DB instead of the CSV and be able to add new drives.

So, you know, the agent, although it completed and we deployed, you can always ask it for more things. It will never kind of complain. Sometimes it's lazy, but for the most part, it will not complain.

It will try to do what you want. So if we don't have any issues, it should be able to create the database for us and set it up. And I have a question, you know, if I'm unsure if I should use Postgres, for example, could I use the agent and just say, you know, what are the pros and cons of using Postgres?

Yes, you can use the agent. You can use our AI feature, which is like a lot cheaper and faster because it's just a conversational thing. So if you go to a new tool, type AI or here under the tools AI, so distinct from the agent, just say, tell me the pros and cons of Postgres.

And I recommend people use Replite AI here to slow down and use Replite AI if you're trying to learn, right? Yeah, exactly. And it also has access to your code base.

And so here, you know, our agent created the Postgres DB and wrote a little more code. And so I can say, like, explain my code. And it should do that step by step.

So it's going line by line. So if you go to main.py, you can see that it is, you know, working on getting the database connection, everything. And it's saying, we're creating the data, we're loading the data, we're creating the map, and really step by step.

And so you can also describe exactly what the agent does. And this is especially important when the agent hits sort of a dead end or a problem, which happens. It's a very, very early technology.

So if you're using Replite AI to do some of the debugging. So here we see the database was created by the agent. And the app is working.

And now the app should be using the new database. And so here we have the scenic drives table. And we have the data inside the table.

So it migrated from the CSV. It took it to the database. It reran the project.

And the app is still working. We have the scenic drives. So it's asking us, is it loading correctly?

So, you know, it did the migration. Is it loading? Yes, it's loading correctly.

Displaying. So I can't emphasize how much work that saved me. You know, typically I would have to go research different databases.

Again, I would have to go to AWS or something like that and figure out how to configure a database and then connect it somehow here. It did all of that for me. And so I'll show you how it connected it.

You know, it created these secrets. These are my database connection variables. I didn't have to mess with any of that.

I didn't have to create tables. It did that for me. It wrote the SQL for me.

And now it's telling me, hey, we're ready to deploy again if you want to deploy a new version. It's crazy, man. Let's see.

What else can I show you here? We have integrations. We make it very easy to integrate with all sorts of AIs, OpenAI, Anthropic, Google Sheets.

You can also ask the agent to do that for you. And I will ask you for the keys and we'll give you examples. We also have code samples for all these integrations.

We actually have also built-in authentication. So you can, you know, with one click of a button, you can sort of make the app locked to only use Repplet authentication for you or for your team. So if you have a Teams account, you can really make it so that only people on your team can access your app.

This is very useful for internal tools. And we see a lot of people using Repplet for internal tools. Let's go to Git.

I mentioned Git previously. So here, every action that the agent did since the start, since the initial commit 20 minutes ago, have been recorded here. And so I can go into any of these commits and roll back.

I can push to GitHub if I want. So here, if I want to create a repository on GitHub, I need to do a repository named scenic drives. Let's make it public.

And then I want to go back and push, push branch. And maybe explain to folks, you know, why are you using GitHub? Why are you pushing into GitHub?

For sure. So GitHub is a version control system and a collaboration system. So if you want to put something open source so that other people can contribute to it, other people can use it and open issues for you and tell you, like, here's what's missing.

Here's what's working and what's not working. You can use GitHub for that. And so you can think about Repplet.

Repplet is the sort of real-time interface for creating applications. You can use Repplet for deployment, for editing, even for collaboration, but it's more real-time. You can think about GitHub as the more long-term sort of storage for your app.

So if you want to keep it versioned there, they have a lot of really interesting tools to help you manage your application. People can download your code. And again, there's this feature called ProRequests where people in open source or people on your team can send you a ProRequest.

This is true of GitHub and other places like GitLab. You can do all of that from Repplet. So here we are, I think, in 15, 20 minutes.

We were able to build an application. We deployed it. We did a data migration.

We moved it to SQL. We pushed it to GitHub. And we're on our way.

Like, if this was a real project, I've already made real progress towards my Scenic Drives startup. Which, if you built that app, by the way, if you have the best Scenic Drives app, I will be the first to buy it because I really like this stuff. So what are the limitations of Repplet and Repplet Agent?

You know, like, what can I add to this app? What can't I add to this app? How do I think about that?

Yeah. So let's talk about limitations of Repplet Agent. I'm going to stop sharing for now and just talk about that.

So, you know, large language models are trained to complete sentences, right? That's the main way they're trained. And so this idea of agents is a very old idea of an AI.

The idea is that instead of completing text or images, you are creating actions. The way agents are built today are kind of a hack. Like, it is not really trained to be agentic.

And the way we're doing agents is mostly via something called reflection, where the AI is thinking. And you might have heard of OpenAI 01. 01 is also doing sort of reflection.

And the other thing is tool calling or function calling, some companies call it. And this is the idea where the AI returns a JSON that tells the developer to call a tool, a tool such as create a database, a tool such as edit code. And that allows us to build something magical like Repplet Agent.

But again, because if it's sort of a hack, like these OpenAI and Anthropic and Google haven't really trained these systems to be action systems, they tend to have lower reliability. What we do behind the scenes is do a lot of retries. That's why it's a little slow.

It's a bit slow and expensive because we're trying to get the reliability up. When you were now two features in, right? Like we built the initial prototype.

We moved to Postgres. Let's call it like, you know, 10 features in, the system starts to struggle a little bit. And so, you know, we're working on ways to scale that and we're working in ways to start new sessions such that you don't have such a long history because the AI starts confusing itself with all its memories.

But for now, it kind of really starts to struggle. And so you want to start moving to our AI or some other AI to start helping you kind of copy pasting code. Very soon, we have a new feature coming up that doesn't have this limitation of Replet Agent, but it's still somewhat agentic.

So think about it as another tool. I'm still not prepared to kind of give it a name yet or talk too much about it. But it'll let you make large changes to your project without running into these scalability issues that we have with agents.

So I would say using the agent today, get your MVP, get your prototype. You can probably get it all the way until users are using it. And then you're still going to at some point have to understand the code and have to figure out how to edit it.

If not understanding the code, maybe you'd have to learn how to use, you know, more typical AIs to like Replet AI or Claude to be able to edit the code. Yeah, I think this is a beautiful place to sort of end it. I think that prototyping is way better than a deck.

Prototyping is way better than, you know, just a tweet, right? So use Replet to prototype it, get it out there, get feedback. We've done it in just a short amount of time.

And then as Replet continues to grow and sort of evolve as an ecosystem and a software, you know, your prototype can evolve with it. Yeah, I will say our systems are very scalable. So you can build entire startups on Replet.

It's only the agent that is still early and not super scalable. So we have startups that reached tens of millions in ARR running on Replet using just Replet database and Replet autoscale deployments. Because we're building a lot of it on just existing scalable infrastructure.

In our case, Google Cloud and existing AIs. But the agent is really new technology and has not scaled well. But you said it, you know, you're absolutely right.

It's like a prototype is, you know, they say a picture or an image is worth a thousand words. A prototype is worth a billion words, right? You can have all sorts of ideas about where you're going to build.

The moment you get a prototype in someone's hands and you watch a user use it, you're going to get so much input and so much feedback. I want to leave people with a success story of someone who's used, you know, Replet or Replet agent, maybe in the last 12 months, built a startup, had an idea, put it out there. What comes to mind as, you know, one or two stories that you could share so that people could listen to that, get fired up and want to start their journey?

There's an entrepreneur. His name is Adil Khan. He was a school teacher.

And during the pandemic, he was kind of bored. He didn't have a lot to do. And so he learned a little bit of coding.

He went on Replet. He created this app called Magic School. And Magic School lets teachers use generative AI in a safe and educational way.

Like you can make new assignments. You can correct assignments. It really supercharges teachers, makes them kind of superhuman in a way.

That's what the best thing about AI. And he quickly got traction. He launched mid-2023.

Early this year, he raised, I think, $20 million. And the revenue ramp was something really, really fantastic. And I think they're probably going to raise another ramp soon because they're doing phenomenal.

And so this is a teacher, learned a little bit of coding, got their idea out there, scaled it really quickly, and was able to raise a ton of money. And so this is really kind of what's possible. But we also have a lot of indie hackers.

One of my favorites is Steve Marco, who builds data.org. He's originally a photographer, if I'm getting it right. We have folks that are, there's also Pietro Schirano, who was a designer and built this company called Everart.

Everart. And he's now building really amazing AI things like Claude Engineer and O1 Engineer. And there's so many stories.

I can spend the next hour talking about them. But they all kind of follow the same trajectory. Someone who's not even an engineer had a spark of an idea but wasn't afraid to try.

And I think that's the crucial thing is that you should just try. You should put some hard work into it. And I guarantee you, you're going to surprise yourself about what you're going to be able to do.

That's a beautiful, beautiful place to end. And I think you're totally right. I think these are teachers who, designers, you name it, it's changed their life.

So it is beautiful how these sparks of an idea, once you put it into code, what could happen. Amjad, thank you so much for your time. Where could people get involved in Replit and start using it?

Just go to replit.com, sign up for our account. We have the core plan, which gives you everything from database, credits, AI, agents. It's really kind of the most affordable kind of builder plan on the internet in my experience.

And a lot of our builders tell us that as well. And I'm on Twitter, Amasad. And I love sharing what people are building with Replit.

And I've been able to help a lot of people get some initial distribution. So if you build something, tweet at me and I'll share it with the world. And maybe folks comment what you're working on with Replit.

And it would be really cool if one day we can do some sort of live event where we're all kind of building and working together. So maybe we can bug Amjad about that in 2025. Yeah, let's do it.

Let's do it. All right. All right.

Thanks, my man. I'll catch you later. Thanks, Craig.

See you. See you. See you.

See you. See you. See you.

See you.