If you're anything like me, you've been down the Cursor AI rabbit hole. The idea of taking an idea and turning it into a code in a few minutes is just so amazing. But before we get ahead of ourselves, I think it's really important to know the best practices when using Cursor AI.

And I found this guy that you've probably never heard of. He's got like a couple thousand followers on Twitter. And the way he explains best practices around using Cursor AI really clicked for me.

So I brought him on the pod. Hope you enjoy. And I think that this video is going to save you hours and hours of time because it's going to give you the foundations of how to actually build something that's going to work.

And that's what we're about here. Taking ideas and making them work. So enjoy.

All right. So I had a question about Cursor. And there's a few people I call when I have a question about Cursor.

But one of my main people is my man, Mike. And I had a simple question. I said, how could you get the best results from Cursor AI?

We're all playing with Cursor. We're stumbling. We're falling.

And my man, Mike, is going to teach us in this video how to get the best results. And this man knows. So thank you for coming on.

Well, again, thank you for the opportunity. Super excited to share some of my findings. And I guess we can get straight to it.

That's what we do. We get straight to it. That's what this channel is about.

Yeah, I love it. No long intro. And we're just getting straight to it.

So yeah, I think, so I've been, for context, I'm a front-end developer in my current place of employment. I do full stack. And I've been playing with Cursor for the last couple of weeks, mainly because I wasn't really a big fan of the other co-pilots that were available, like GitHub co-pilot.

So I decided to give Cursor a shot. And I think a lot of people are starting to enjoy it. But I realized there are a couple of things that I think if people made these tweaks, at least I believe the output would be different.

And this is my personal experience. So the first thing I would really say is planning. I don't think it makes sense to just jump on Cursor, go on the Composer, and just start asking it to build stuff.

I really do think even if you're using AI, you're not a developer, you should have that developer mindset where you plan on what you're going to build, what it kind of looks like. I would even go as far as having some sketches that you can go on Paint or Figma or even handwritten and really have like some sort of picture in mind. Reason being is whenever you're prompting these AI models, you want to give it as much context as possible.

You don't want to assume it's smart, and you don't want to make the AI the boss. You're the boss. The AI is the co-pilot, right?

So the biggest thing I would say is planning. And I don't see enough people planning. I see people just jumping on Composer and telling you to make stuff.

And I think your outputs would be really, really great if you did a lot, if you did planning before you go to Cursor. So this step I call the measure twice, cut once strategy. So you measure twice.

I think, yeah, Figma is where you want to start, right? Yeah, 100%. Like somewhere where you can draw.

Like if you don't have Figma and it's too difficult for you to paint, whatever it is, just like, you know, even if you're not a developer, start to think and act like one. You know what I mean? Like half the game is acting like one.

And do you have anything you can share of planning documents or something like that, that people can have a look at so they get a sense around, okay, I think I understand what I'm talking about. I actually do. And this is pretty funny.

My, like very first, I would say product that popped off. I don't know if I have it in my Apple notes, but I literally just drew on my iPad. Let me see if I can pull it up here.

Just sketches. And there are also AI platforms that you can use. Let me see if I could pull it up here.

Can you see my screen? Oh, baby. Do I see your screen?

Yeah. So this is like something simple. And this was before we even had Cursor.

This was just chat GVT. And I think I was doing some client work. I think this was for client work where I literally just drew this out.

And this was like some portfolio page for like a Web3 client of mine. And I took this screenshot, uploaded to chat GVT, and we didn't even have like code or anything like that. But basically we didn't have clot or anything like that.

But basically I just asked it, how should I plan this out? What should my structure be? I want it to look like this.

What should I do? And I already know what I was going to do, but this was me sort of like building, this was me asking my assistant, my co-pilot for some advice. Oftentimes in the programming world, you call this rubber ducking where you're talking to a fictional duck that doesn't exist, but basically explaining what you're thinking.

And in doing that, you kind of start to have realizations. And maybe this isn't a smart way of doing things. Maybe this is a great way of doing things.

And I think with AI, you can do that a lot better. And not only that, I know I'm sure people are familiar with V0, but I highly, highly suggest that at least if you're not going to plan with like Figma and stuff like that, at least start with V0. Reason being is I find it, it really helps visualizing what your potential app, MVP, whatever it is, will look like.

And V0 is great for that. So for example, let's say, shh, don't tell anyone, but I've got 30 plus startup ideas that could make you millions. And I'm giving them away for free.

These aren't just random guesses. They're validated concepts from entrepreneurs who've built $100 million plus businesses. I've compiled them into a one simple database compiled from hundreds of conversations I've had on my podcast.

But the main thing is most of these ideas don't need a single investor. Some cost nothing to start. I'm pretty much handing you a cheat sheet.

The Idea Bank is your startup shortcut. Just click below to get access. Your next cash flowing business is waiting for you.

I want to build a clean looking marketplace website for bicycle sellers. I don't know, something random. And what's great with V0 is that you can just keep going and going.

And I truly believe this is where you start. And once you have a sense of, okay, this is what I kind of want to build, then you take this over to Cursor. Then you take this over to Claude or whatever AI model you want to use.

I think people are jumping straight to Claude or to Cursor. And sure, you can get results. But I think V0 or maybe drawing it out is where you start.

And what I love about V0 is because it's built using Shatzian UI, which is a UI library, you can really get nice looking UI. And this is just one one prompt. If I, like I could ask it for maybe a better gradient, maybe more rounded edges, maybe a testimonial section.

It even gave me a footer. And all I would do is literally just copy this code and take it over to Cursor. And now Cursor has something to build on top of, which I truly believe is where it shines best.

So go back to that wireframe that you had before. Right here. I feel like, and correct me if I'm wrong, like it almost makes sense that even before you get into V0 to draw it out.

Yeah. And you know what? We can even test this out.

Why don't I drag and drop this into V0? This is what I'm talking about. The live cooking starts.

This isn't even planned. So drop the screenshot. I want to build a Web3 portfolio.

I spell portfolio on portfolio website. Refer to the wireframe. Web3.

Do you want to include Web3? Or did I not say, oh, I meant Mr. 3.

Please and thank you. And one thing, I don't know if this actually helps, but I'm nice to my AI and I seem to be getting great results. So this is live.

I didn't plan this. I didn't even know I had these screenshots. And so it's cooking.

Okay. Got the search. Yep.

This is what I live for. So we went from this screenshot, this drawing on my iPad to this. And now what's cool about this is I can start getting specific and saying, move the search bar to the right.

And then what if I do that? It's going to move the search here. So this is just a great place to start.

And I think a lot of people would benefit spending a good chunk of time here. Just because as a developer, especially when I'm working on like software that people actually use, not just like a side project. You have to spend a lot of time planning, making sure you know what it looks like.

Because whenever you start coding, that's not the time where you should be thinking about what you should do. You should already know what you should do. And then just start writing code from there.

So I really do believe people would benefit massively. Draw something up, whether it be Figma, your iPad, pencil, paper, whatever it is. Take a picture of that.

Place it over at V0 and start prompting with V0. Like you can go far. Like I would say minimum, you should go at least 10 to 15 prompts with V0 and get what you want to build as close as possible to what you've envisioned.

And it's very possible. Like V0 is that good. So that's at least where I would start in the beginning.

No cursor so far. Step one of being good at cursor, don't go on cursor. Exactly.

Exactly. Like that's why I have you here for the hot takes. All right.

What else you got? Yeah. So that's number one.

So planning, like spend as much time planning, daydreaming, visualizing, drawing. V0 is a great friend. And I like the name V0 because it literally is your version zero.

And then second is I know the devs might know this, but a lot of people are getting to cursor don't know this. There's a site called cursor.directory. And it's a pretty sick site.

And basically what cursor.directory is there are these prompts that you can copy and paste and place in your cursor code base. And essentially what this does is this is like the like this is the initial prompt it will read before you even get to prompted anything. So let's say I'm building an app that uses Next.js, right?

I can go here and search Next.js. Click that here. And then I see that there's six different prompts I can copy.

So if I click on this one right here, this is what you would copy paste into cursor. It says you are an expert in TypeScript, Node.js, Next.js, AppRotter, React, Chatzee, and UI, Radix, UI, and Tailwind. And then there's just a bunch of best practices that cursor should follow for Next.js.

And the reason why this is important is because sometimes the models have a tendency to pull outdated information. It's not that it's wrong, but it's just outdated. So what this does is you are setting up your cursor code base for success.

And all you literally do is you go to the site, you copy this text, and they even have an instruction. I believe it's in about. Yeah, so if you go in about, it tells you copy and add dot cursor rules file in the root of your project.

So I can even show a live example of this just to tie the picture home. Actually, we'll do this for one of my projects for my portfolio site right now. So let me know.

Okay, you can see that, right? So this is my portfolio site, simple Next.js code base. The way this would work is I would go on cursor and I would create a new file in the root folder.

And it would be called cursor rules. That's it, right? Cursor rules.

And then what I do is I search what technologies I'm using to build whatever I'm building. I'm using Next.js. I'm kind of a Next.js fanboy.

So I'll go to Next.js. I'll read through these. This one seems to be the closest to what I'm building with.

And if I want, I can always tweak it. So I copy that. And then I paste that here.

And all I do is save. And I'm good to go. So now every time I prompt cursor, I either bring the composer view or the side AI chat.

Every time I prompt it, it's going to know what my code base is based on because of this dot cursor rules file. So highly, highly suggest. Again, it's cursor dot directory.

All you have to do is just find what technology you're building with. If it's Python, you go to Python, copy it, and then create a dot cursor rules file, paste it in there. And I've literally seen night and day results just by this simple implementation.

So highly suggest people do this. I mean, it makes sense, right? It's like, why wouldn't you go use this?

100%. And I think it just takes 30 seconds of work. And here's what's cool.

So let's say you're using a set of technologies that are not listed here. What you can do is you can copy a couple of these, go to Claude or GBT or whatever, and be like, I'm actually using these technologies. Can you write something similar following this flow for these technologies?

Copy, paste. Oh, wow. That works?

Yep. So we can, let's, why don't we, again, let's do live example. So let's say I'm going to copy this.

I'm going to say I'm building an application or let me say a web application using React and Python. Python. I want to write a nice prompt for my AI similar to the one below.

Please be just as concise. Right? And I don't even spell things properly.

But let's see. And then I'll paste that. And then let's hit enter.

So it says here is, so here it is. You're an expert in React, Python, scalable web applications. Key principles, right?

Concise. You literally got the same thing. Dependencies, React 18, Python.

And it even got the versions right too. React 18, TypeScript, React router, Axios, fetch API for implement code, splitting, lazy loading in React so your sites load. Yeah.

This is great. So even if you don't have an incursor directory, copy one or two examples, prompt it the way I just prompted. And if there's something, maybe you want to use React 17 or 16 for some reason.

I don't know why. Or you want to use JavaScript. You know, tell it, you know, I actually want to use JavaScript, not TypeScript.

And then you can manually edit that yourself. Or I can just be lazy, tell it to do that. And then look, React JavaScript.

See? Right here it mentions it. React JavaScript, use functional components.

So. Crazy. Right?

So, again, this is before we haven't even started using Cursor to write any code. So highly suggest that you implement Cursor directory because it just makes your prompts on Cursor. The results at least you get from Cursor are much, much better.

Yeah, I mean, both those things, no brainer. No brainer. And I think they're easy to do, right?

The planning is fun because you're in your creative process and Cursor directory literally takes 30 seconds. The planning is fun. I will say I'm one of those people that I just need to, like, get into it, you know?

And I think a lot of people are like that. But I have to, it sounds like I need to stop myself and just sort of take a breather, start writing it down, use, you know, a Figma or something like that. The Cursor directory to me is, like, quite literally, thank you for just saving me time.

No problem. Yeah. And I think to, like, to your point, I'm that type of person, too, like, well, where even to this day, I just like jumping into the coding because I do enjoy writing code.

But I will say two things. First, you save yourself a lot of headache. And I think that people who might not be developers who are getting into building stuff using AI, I really think one thing that people need to start to embrace is the pain.

Because there's a lot of pain when it comes to just building things in general, especially now with, like, these tools. There will be a lot of times where you'll get stuck and you won't know what to do. And then you'll flip-flop.

And then maybe you want to go this direction or that direction. And this is coming from personal experience. It just saves so much time.

Even if it's maybe not the coolest way of starting, it just saves so much time planning. And I think you set up your AI assistant, your co-pilot, for success when you already have a lot of the information ready. Right?

I don't think that models are at a point where it's good enough to just start from scratch. We'll get there eventually. But if you're trying to build something that people actually use, I really do think you should really have that developer mind where, you know, you might not be doing things you like, but you're starting off with planning and then taking those plans, creating some mock-ups, setting up your cursor directory, and then going about programming.

But from like a side project perspective, have fun. Have as much fun as you want. Go one-shotting.

You know, break stuff. Like that's a learning process in and of itself. You learn a lot doing that.

But when you want to build something and it's, you know, something of importance, I definitely think the planning should happen. At least try. That's my hope.

Cool. What do you mean by tagging docs? Yeah.

So very important when you're building something to know what technologies you're building. You might not need to know how exactly they work, but it's super important to know the technologies you're building because every technology you're using to build has documentation. So, for example, a lot of people, whether they know it or not, are using Next.js.

So if I go to Next.js.org and then I click on Docs, right, I essentially have the documentation to everything Next.js, how it works, how things are, what, like, you know, how routing works, pages works, layouts, and all this stuff. And one thing I would suggest, even if you're a non-technical person, I would highly suggest maybe just taking a breeze at things. Just take a look at stuff.

If something doesn't make sense, take a screenshot, give it to AI, tell it to explain to you as five. But what I mean by tagging docs is, let's go to cursor here. Something cool that you can do on Composer is I can hit Add, and then you see this Docs right here?

I can click Docs, and then I can click Add New Doc, and then I can literally copy. Let me just make sure I'm getting this URL. I can paste it here, and I'll call this Next.js Docs, and then it should save.

So now, inside my cursor, I have access to the Next.js Docs. And the reason why this is important is because, again, a lot of these models, you know, scrape the internet and all that stuff in a specific time. Maybe some of that information is outdated.

Maybe it's not best practices, right? Any technology you're using, the docs are usually the best source of truth. So now, I have access to the docs, and I can say, how can I build a simple page that says, hello, world?

I hit Enter. So now, it's going to take in, notice how it's reading the Getting Started page, dynamic modules, building your application. So I've literally given cursor the latest and greatest information when it comes to setting up a Next.js application.

So not only do I get the code set up, but I also get commands on how to run it. And I think one thing that people should do, even if you're not a developer, again, act like it until you become one. I would at least suggest, like, going to whatever pages it mentions.

So it said here, Getting Started. So let's see if it's slash Getting Started. I don't know if this is the page.

Oh, it's not the page. Maybe it's here, right here, Getting Started. Okay, can't find the page.

But you get my drift. You get my drift. I really think, like, as people are building, they should use the building moment as a learning moment.

And that's essentially what I mean by tagging docs. So let's say another technology that people might use for their databases, Supabase. So I'll just search Supabase docs.

And then I'll just copy this right here. And then let me create a new composer view. I'll just add docs.

Oh, pre-populated some docs here. I'll add a new one. Paste the link.

Hit enter. And then I'll name this Supabase docs. And then hit confirm.

And now I have access to literally all this information here. I don't really have to read through this. I can just ask composer this.

And what this does is every time I have an issue, I can tag these docs. And cursor can debug the issues I'm having with the most up-to-date information. Right.

So it just makes your life way more easy, right? Because we're all going to run into these bugs. And when you see that sea of red, you want to get out of there as quick as possible.

So yeah, this makes a lot of sense. Also, it sounds like it's really helpful for, like if you're a beginner cursor user or beginner developer, let's call them that. Learning about all these different frameworks and platforms, like for example, Supabase or Next.js.

Like I think your recommendation around go and just read all these documents is just going to get you up to speed so that you kind of speak the language and you understand the ecosystem, right? Exactly. And that's half the battle really is just knowing what these words mean.

And I think with AI, like you can expedite that process, right? So if you know the technologies you're building with and you have access to the docs and your AI has access to the docs, like every time you get into an issue, it's easy for the AI to solve it. And in solving it, you start to understand how things work, right?

I think this is one of those things where if people are used to learning, then doing, it's going to be a tough time because it's one of those things where you're going to do, it's going to break. And then you're going to do again, it's going to break. And then when it works, you realize, oh, this is how it works.

You just learn something new. Right. And I think so far, the first three points have really just been preparing cursor with all the information.

And I think context is key with all these AI models. A lot of people think AI is just magic where it just knows stuff. No, it just has a lot of context already pre-built in.

So what you and I are doing is just giving it as much context as possible with what we're building, with what we're doing. So it's sort of aligned with us, right? It's almost like hiring a new employee.

And this is the onboarding phase. Cool. Quick ad break.

Let me tell you about a business I invested in. It's called boringmarketing.com. So a few years ago, I met this group of people that were some of the best SEO experts in the world.

They were behind getting some of the biggest companies found on Google. And the secret sauce is they've got a set of technology and AI that could help you outrank your competition. So for my own businesses, I wanted that.

I didn't want to have to rely on Mark Zuckerberg. I didn't want to depend on ads to drive customers to my businesses. I wanted to rank high on Google.

That's why I like SEO. And that's why I use boringmarketing.com. And that's why I invested in it.

They're so confident in their approach that they offer a 30-day sprint with 100% money-back guarantee. Who does that nowadays? So check it out.

Highly recommend boringmarketing.com. What do you mean by asking other AI? Yeah.

So there will be times that cursor gets stuck. And I've experienced this where I have a simple bug. The fix is pretty simple.

Like I see it. I know how to fix it. But I'm trying to understand, like, how would I go about doing this if I was just using AI?

And the easiest thing I've realized, and a lot of people have said that I'm wrong on this. But what I've realized is whenever a cursor is stuck, even though I'm using Claude within Cursor, I realize when I copy that same issue, that same bug, and I paste it over to Claude, even though it might be using the same model, it actually, like, it'll be able to actually solve it. Now, I don't understand how AI models really work, but I've kind of, based on my own workflow, realized, like, if it's continuously getting stuck, that's probably the time to consult another AI model.

Maybe go to Claude, maybe go to V0, maybe go to even ChatGVT, whatever it is. But what I've realized recently works even better is giving whatever AI model you're going to, the bug that you experienced, the solutions that it tried to give and didn't work. Because when you do that, you're essentially telling it, hey, this is the issue.

These are the solutions it tried. It failed. You need to do something new.

And when I started doing that, the results were much, much higher. Again, context is king. So instead of just copy pasting the bug and giving it to the next AI model, it will probably give you the same solution again.

But what you do is you give it the solutions it tried, that it failed, even give it the output you're getting and what you're expecting. And I've seen time and time, every time I do that, the results are just much, much better. So if you're stuck with cursor, take the bug, copy paste the code that's giving you an issue, the red squiggly lines, copy paste the potential fixes that it gave but failed, give that all to another AI model, the results are next level.

So that's what I mean by asking other AI or other assistance. Cool. And you even said chat GBT when all else fails.

Yeah. When all else fails. Yeah.

It's like the bottom of your list. You know, it's funny just how things have changed like over the last few weeks even. It is.

Like I pay for cursor, V0, Claude. I don't pay for chat GBT. And I don't think I ever will.

Wow. I think Claude, like Claude is great for like everyday tasks plus programming. Cursor is cursor.

And V0 is just great for starting in UI components. Chat GBT just seems, you know, so. Meh.

Mid. Basically. But who knows?

Maybe the next model sweeps us. Totally. Who knows?

Who knows? Okay, cool. What else do you want to talk about?

Yeah, so some things that cursor is great at that I highly recommend or AI in general is great at is number one, let's say, and this is more for developers, let's say you have some code already written and you want to open source it or you want to explain it to somebody else. Asking AI models to explain what's already written, 10 out of 10, probably the best thing. I think as a developer, the most annoying thing is writing documentation and AI is great at that.

But I'm assuming most people who are watching this are not developers. So to the next point, explaining code and teaching code. So let's give a live example here.

I have my portfolio site here. Let's go on maybe the projects card. So this is just some simple code.

And basically what this code does is just to give you a visual representation is on my portfolio. You see these project cards and you see like this hover, like when you have a screen that follows. Nice touch.

I appreciate that. Thank you. I pride myself in good design.

That's what this component does. Right. So I actually have done this already.

I have some comments already written here that I use AI to write. But let's say I go here and then I'll do command shift L. Explain this code to me like a beginner.

I want to know the flow, logic and overall how things work. Please and thank you. So copy this component.

And now this is what's going to do. So certainly I'd happily explain this code component setup. This code defines a React component called block cart.

It is a client component indicated by use client at the top. So if I go to the top. Okay.

So use client. This is a client component, which means it uses React hooks and handles client side interactions. So let's say this doesn't make sense to me.

I'll copy this over and then ask it again. Right. And it says the components accept three props, state and refs, mouse movement handler, outer container.

So it literally breaks things down to you. And then what I would do is when you read something that doesn't make sense, I can literally copy this and be like, what does this mean? And then hit that.

Use client directive. When you use client at the top of the file of Next.js, it is telling Next.js that the component should be rendered on the client side in the browser rather than on the server. Okay.

So when I add use client, this file is being rendered or basically in a very simple term, it's being cooked on the browser versus on the server. So the more you do this, I know first glance, this might seem difficult, but it's like a snowball effect. The more you do this, the more you learn these little things, you start to catch and understand patterns.

And truthfully speaking, I know a lot of devs will hate me for this, but if you understand the patterns enough and we assume the models will continue to grow in the way that they're growing, which is not linear, but exponential. Like we can get to the point. I don't, I'm not saying we're there yet.

I still think the models have a way to go, but we can get to the point of someone invests time now that they can get really good at building stuff that works. And that's what I mean by, I think. Cursor or any model, Claude, especially, they are really great at explaining code and like teaching concepts.

So highly recommend as people are building to just ask it to explain, what did you do here? What do you mean by this? How does this work?

Is there any other way to do this? And I really think it would benefit people, especially as they go on, as the models get better to know these things now. Totally.

It sounds like it might take you a little bit longer, but in the short term, but in the long term, you'll be more self-sustaining. You'll understand more. You'll be able to build quicker.

You'll understand the landscape more. Yeah. And I think that's kind of where my viewpoint is.

I see a lot of like, there are a lot of companies, for example, building like agents, a lot of startups doing this, that, and a third. And then there's a part of me that's like, all that we're seeing right now is just the early version of stuff. Even Cursor, I don't doubt Cursor, if they keep going this trajectory one, two years from now, is going to be a whole different monster.

So it's in my opinion that anyone who is watching this or in this space right now, that they invest time in learning this stuff, not because they'll make meaningful change now, but when the models get really, really good, maybe in the next six months, a year, two years, you have been well prepared and just the timing of things will be perfect. Right? So I know there's a lot of people like, oh, there's no point in being a developer now, like being a developer.

I think, in fact, the best time is now because not only will you be able to know how to code, but you have these models that will probably at some point code better than you. And it will at least explain concepts to you. It's unreal.

Like I've learned, like I do freelancing on the side, and I've learned so much of new technologies that if I didn't have these tools would have taken me time. Like I'm mostly a web dev. Mobile dev picked it up in literally a week.

In a week. Now, does it help that I know how to program and stuff? Yes.

But what would have taken me some time has literally taken me a week. And not only did I learn how to build, but I built while I learned. And I think a lot of people, if they just stick to the pain for the next couple months, when these new models come, I think you'll be in a great position.

I love it. Anything else you want to add? Yeah.

I would say adding comments to code kind of showed that here. Right? If you write some code and you want to know how this works, you can literally ask it, add comments to my code.

I already have them here, so I won't show that. And the last thing I would say is duplicating what already exists. So let's say, and I can't think of an example, so hopefully people can catch the theory I'm about to share.

But let's say you have some sort of functionality on one page that does something, and it does it really, really well. And you have to do something similar on another page, but with a twist. What I've seen helps is you copy that code or you copy that functionality, and you say, this works for this page.

Can we do the same thing for this page, but, and then explain exactly what you want done. And the more I talk about these things, I realize it's just the more context you give your AI models, the better answers they will give you. So I noticed that if you already have existing functionality and you want to do something different, but it's very similar, referencing that existing functionality really, really helps.

And I guess one tip I would have, and I know we talked about this, and I'm sure Cursor and all these AI platforms will probably do this, is if you can have like a template that already has, and I know Replit is doing this with their latest announcement. If you have a template that already has a lot of boilerplate code, like let's say has a landing page, has authentication, like Google Auth and all that set up for you, maybe a database integration, a dashboard. If you can have that and build on top of that, that to me, I think is the smartest way of doing things.

For example, I can give a simple example here. If I open my cursor here. So this is my starter kit.

And basically what I realize is, especially when I'm doing freelance work or side projects, is I sort of do the same thing. And again, and again, I need a landing page. I need payments with Stripe.

I need a database. I need authentication where people should be able to log in with Google or email or whatever it is, or two-factor authentication. And I kept building the same thing again and again.

So what I did was I built one based on the different projects I've done, put it together. So every time I, as a developer, forget AI, as a developer building something, I always start with my starter kit. And it's to my understanding that I know, quote me on this cursor and all these AI models will do this, is they will start providing people with templates that they can build off of.

So one thing I would highly suggest, I have my own. It's free. You don't have to pay for it.

I know some people charge. You can use my template or you can find a template. You can literally go on GitHub and be like Next.js starter template or React starter template.

Find one that a lot of people are raving about and download that code and use it in your cursor. I think that is probably the best place for people to start when it comes to developing if they're trying to build something serious, right? Because authentication is hard.

I'm not going to lie. Setting up your DB from scratch is hard. But if you find these templates and there's a lot of them out there and you build on top of that, you're cooking.

Dude, this is everything I wanted and more. This is like the de facto how to get the most out of cursor video. And I appreciate you sharing that free template too with everyone.

Highly recommend people check out Mike's YouTube channel and just his content he's thrown out there. It's dope. And thank you for your time.

We did another video for people with the starter template. We created basically a social media app in like 90 minutes. So if people are interested, you can check out that video.

I'll link it in the description. We can use the comment sections on YouTube as just like people who are building. And Mike, maybe you can...

I'll be in there. Mike, maybe you jump in here, comment a little bit. And let's all build some cool stuff.

Yeah. Again, Greg, thank you so much for your time. I'm really, really appreciated.

Don't take it for granted. And if anybody has any questions, you can leave them in the comments. I will 100% reply.

I don't want to say all of them because you get a lot of comments to as many of them as I can. And just like the AI models, add as much context as possible, please. And yeah, again, thank you so much for this time.

I really appreciate it. Cool. Yeah.

And if people like this and found it fun and interesting, maybe we'll do it again. So please let us know. Yep.

Let me know and maybe I'll be back. Haha. Love it.

Thanks a lot, man. All right. Bye.

Bye. Bye. Bye.

Bye. Bye. Bye.

Bye. Bye. Bye.

Bye. Bye. Bye.

Bye. Bye. Bye.

Bye. Bye. Bye.

Bye. Bye. Bye.

Bye. Bye. Bye.

Bye. Bye.